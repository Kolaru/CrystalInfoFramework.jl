const _cif1_grammar_spec = raw"""
COMMENT : /(#.*[\n\r](?!;))|(#.*)/
WHITESPACE :  /([ \t\n\r](?!;))|[ \t]/
%ignore COMMENT
%ignore WHITESPACE

SEMI : ";"

NODELIM_DATA_VALUE : /((?!(((S|s)(A|a)(V|v)(E|e)_[^\s]*)|((G|g)(L|l)(O|o)(B|b)(A|a)(L|l)_[^\s]*)|((S|s)(T|t)(O|o)(P|p)_[^\s]*)|((D|d)(A|a)(T|t)(A|a)_[^\s]*)))[^\s\"#$'_\[\]][^\s]*)/
LBLOCK : "loop_"i     
GLOBAL : "global_"i
STOP : "stop_"i
SAVE_HEADING : /(S|s)(A|a)(V|v)(E|e)_[][!%&\(\)*+,.\/:<=>?@0-9A-Za-z\\\\^`{}\|~\"#$';_-]+/
SAVE_END : "save_"i
DATA_NAME : /_[][!%&\(\)*+,.\/:<=>?@0-9A-Za-z\\\\^`{}\|~\"#$';_-]+/ //_followed by stuff
DATA_HEADING : /(D|d)(A|a)(T|t)(A|a)_[][!%&\(\)*+,.\/:<=>?@0-9A-Za-z\\\\^`{}\|~\"#$';_-]+/
START_SC_LINE : /(\n|\r\n);([^\n\r])*(\r\n|\r|\n)+/
SC_LINE_OF_TEXT : /[^;\r\n]([^\r\n])*(\r\n|\r|\n)+/
SINGLE_QUOTE_DATA_VALUE : /'(('(?=\S))|([^\n\r\f']))*'|\"((\"(?=\S))|([^\n\r\"]))*\"/

// We create the "bare" production so that our transformer can
// intercept non-delimited period and question mark

input : dblock* 
dblock : DATA_HEADING block_content* 
block_content : data | save_frame 
save_frame : SAVE_HEADING data* SAVE_END 
data : scalar_item | loop 
scalar_item : DATA_NAME data_value 
loop : LBLOCK DATA_NAME+ data_value+ 
data_value : quoted_string | bare | semi_string
bare: NODELIM_DATA_VALUE  
quoted_string : SINGLE_QUOTE_DATA_VALUE
semi_string : START_SC_LINE SC_LINE_OF_TEXT* SEMI 

"""

